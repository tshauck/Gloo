{"google":"UA-35750707-1","body":"==============\r\nA Data Project Manager for IPython\r\n==============\r\n\r\nWritten by [Trent Hauck](http://trenthauck.com).\r\n\r\nVideos\r\n=====\r\nCreate A Project\r\n----------------\r\n[Create Project Video](http://www.youtube.com/embed/izBnfILEeIE)\r\n\r\nHi\r\n\r\n<iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/izBnfILEeIE\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\nProvides utilities and functions for managing data projects in python.  Requires\r\nuse of IPython and Pandas.\r\n\r\nA quick workflow example::\r\n\r\n    from gloo import Gloo\r\n\r\n    proj = Gloo('My Project', full_structure, packages=['scipy',\r\n                                              ('numpy', 'np')])\r\n\r\n    proj.create_project()\r\n\r\n    #Now say you've done some work, added some data, and munge files.  And come\r\n    #back the next day, fire up IPython in the project directory.\r\n    proj = Gloo('My Project')\r\n    proj.load_project()\r\n    ##the packages will be available, and any data you put in the data folder\r\n    #will be available as pandas DataFrames and those packages defined above\r\n\r\n\r\nIntroduction\r\n============\r\n\r\nGloo's goal is to tie together a lot of the data analysis actions that happen\r\nregularly and make that processes easy.  Automatically loading data into the\r\nipython environment, running scripts, making utitlity functions available and\r\nmore.  These are things that have to be done often, but aren't the fun part.\r\n\r\nproj.create_project() Options\r\n---------------------------------------------------------\r\n\r\n``project_name``: This is a string that is the name of your project.\r\n\r\nCurrent Config Options:\r\n  ``full_structure``  If True the folder structure outline below.  By default \r\n  creates smaller project, i.e. False.\r\n\r\n  ``packages`` A list of strings of python packages to load when\r\n  ``load_project()`` is called.  Defaults to empty.  If you want to alias your\r\n  package you can pass a tuple to the list.  ``['scipy', ('numpy', 'np')]``\r\n  will import scipy as scipy and numpy as np.\r\n\r\n  ``logging`` A boolean to dictate if logging is started when\r\n  ``load_project()`` is called.  Defaults to False.\r\n\r\n  ``svn`` Pass a list or a string to init version control.  Currently supports\r\n  git and bzr.  ``svn = ['git', 'bzr']`` will init both.\r\n\r\nThose options are saved into a pickled file called .gloo at the root of the\r\nproject directory.\r\n\r\nWhat Happens When You Call load_project()\r\n-----------------------------------------\r\n\r\n``proj.load_project()``\r\n\r\n1.  The config is loaded into a dictionary.\r\n2.  Data is the ``data`` directory is loaded into the environment.  This is done\r\n    recursively so you can have subdirectories.  If you do, the parent folder of\r\n    the data file will be prepended to data file, ``folder_file``.  The plan is\r\n    to make the prepending optional.\r\n3.  Files in the ``munge`` directory are run.  This folder is where you would\r\n    put files necessary for preprocessing the data.\r\n4.  Files in the ``lib`` directory are imported.  This folder is where you would\r\n    put files that you would like to load as a module.  So if you have\r\n    utility.py in the lib directory.  When you load the project you'll have\r\n    utility availble in the namespace.\r\n5.  Packages specified in the config are loaded into the environment.\r\n6.  Logging starts\r\n\r\nFolder Structure\r\n----------------\r\nThe full structure is as follows::\r\n\r\n    data/        : data  \r\n    doc/         : documentation  \r\n    diagnostics/ : automatically check for data issues  \r\n    graphs/      : graph domicile  \r\n    lib/         : utility functions  \r\n    munge/       : preprocessing scripts  \r\n    profiling/   : benchmark performance  \r\n    reports/     : reports you'll produce  \r\n    tests/       : tests\r\n\r\nOther things you can do\r\n----------------------\r\nYou can update the config.  Say you have ``packages = ['numpy']`` but once\r\nyou've worked on the project you realize you need pandas and you want to load\r\nit as pd.  It's easy to update this of the future::\r\n\r\n    >   proj.packages\r\n        ['numpy']\r\n    >   proj.packages.append(('pandas', 'pd'))\r\n    >   proj.save_project()\r\n\r\nSo next time you load the project pandas as pd will be available.\r\n\r\nInstalling Gloo\r\n===============\r\n\r\n* ``pip install Gloo`` is available.\r\n* There is also an ubuntu package available on LaunchPage\r\n* Gloo currently isn't supported on Windows\r\n\r\nContributing\r\n============\r\nBecause this project is in such an early state I would love for anybody and\r\neverybody to help contribute.  I think this could be very valuable for those\r\nworking with python for data projets.\r\n\r\nThanks\r\n======\r\nThis project is a bit of a rip-off or port (however nice you're feeling) of\r\nProject Template, which ifyou're using R I would highly recommend.  It's fantastic.","name":"Gloo","tagline":"Data Project Management for iPython","note":"Don't delete this file! It's used internally to help with page regeneration."}