{"body":"==============\r\nProjectManager\r\n==============\r\n\r\nProvides utilities and functions for managing data projects in python.  Requires\r\nuse of IPython and Pandas.\r\n\r\nA quick workflow example::\r\n\r\n    from gloo import interactive\r\n\r\n    interactive.create_project(\"MyProject\")\r\n\r\n    #now if we have some some scripts to use and some data in the data folder we\r\n    #can load the project\r\n\r\n    interactive.load_project()\r\n\r\nIntroduction\r\n============\r\n\r\nGloo's goal is to tie together a lot of the data analysis actions that happen\r\nregularly and make that processes easy.  Automatically loading data into the\r\nipython environment, running scripts, making utitlity functions available.\r\nThese are things that have to be done often, but aren't the fun part.\r\n\r\nWhat Happens When You Call create_project(\"MyProject\")\r\n---------------------------------------------------------\r\n\r\n``create_project(project_name = \"MyProject\", **kwds)``\r\n\r\n``project_name``: This is a string that is the name of your project.\r\n\r\nCurrent Config Options:\r\n  ``full_structure`` A boolean that if true creates a full folder structure.  If\r\n  True the folder structure outline below.  Defaults to True.\r\n\r\n  ``packages`` A list of strings of python packages to load when\r\n  ``load_project()`` is called.  Defaults to empty.\r\n\r\n  ``logging`` A boolean to dictate if logging is started when\r\n  ``load_project()`` is called.  Defaults to False.\r\n\r\n  ``git`` A boolean to dictate if a git repo is init'd.  Defaults to False.\r\n\r\nThose options are saved into a json file called .config.json at the root of the\r\nproject directory.\r\n\r\nWhat Happens When You Call load_project()\r\n-----------------------------------------\r\n\r\n``load_project()``\r\n\r\n1.  The config is loaded into a dictionary.\r\n2.  Data is the ``data`` directory is loaded into the environment.  This is done\r\n    recursively so you can have subdirectories.  If you do, the parent folder of\r\n    the data file will be prepended to data file, ``folder_file``.  The plan is\r\n    to make the prepending optional.\r\n3.  Files in the ``munge`` directory are run.  This folder is where you would\r\n    put files necessary for preprocessing the data.\r\n4.  Files in the ``lib`` directory are imported.  This folder is where you would\r\n    put files that you would like to load as a module.\r\n5.  Packages specified in the config are loaded into the environment.\r\n6.  Logging starts\r\n\r\nFolder Structure\r\n----------------\r\nThe full structure is as follows::\r\n\r\n    data/        : data  \r\n    doc/         : documentation  \r\n    diagnostics/ : automatically check for data issues  \r\n    graphs/      : graph domicile  \r\n    lib/         : utility functions  \r\n    munge/       : preprocessing scripts  \r\n    profiling/   : benchmark performance  \r\n    reports/     : reports you'll produce  \r\n    tests/       : tests\r\n\r\nInstalling Gloo\r\n===============\r\n\r\n* ``pip install Gloo`` is available.\r\n* There is also an ubuntu package available on `LaunchPad\r\n  <https://code.launchpad.net/~pythonxy/+archive/pythonxy-devel>`_\r\n* Gloo currently isn't supported on Windows\r\n\r\nContributing\r\n============\r\nBecause this project is in such an early state I would love for anybody and\r\neverybody to help contribute.  I think this could be very valuable for those\r\nworking with python for data projets.\r\n\r\nThanks\r\n======\r\nThis project is a bit of a rip-off or port (however nice you're feeling) of\r\n`Project Template <http://www.projecttemplate.net>`_, which if\r\nyou're using R I would highly recommend.  It's fantastic.\r\n","tagline":"Data Project Management for iPython","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Gloo","google":"UA-35750707-1"}